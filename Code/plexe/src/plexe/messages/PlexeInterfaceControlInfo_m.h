//
// Generated file, do not edit! Created by opp_msgtool 6.0 from plexe/messages/PlexeInterfaceControlInfo.msg.
//

#ifndef __PLEXEINTERFACECONTROLINFO_M_H
#define __PLEXEINTERFACECONTROLINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef PLEXE_API
#  if defined(PLEXE_EXPORT)
#    define PLEXE_API  OPP_DLLEXPORT
#  elif defined(PLEXE_IMPORT)
#    define PLEXE_API  OPP_DLLIMPORT
#  else
#    define PLEXE_API
#  endif
#endif

class PlexeInterfaceControlInfo;
// cplusplus {{
#include "plexe/driver/PlexeRadioDriverInterface.h"
// }}

/**
 * Class generated from <tt>plexe/messages/PlexeInterfaceControlInfo.msg:29</tt> by opp_msgtool.
 * <pre>
 * //
 * // Control data used to choose which network interface to use
 * //
 * message PlexeInterfaceControlInfo
 * {
 *     // binary map indicating which interface to use (can be multiple of them)
 *     int interfaces \@enum(plexe::PlexeRadioInterfaces) = plexe::ALL;
 * }
 * </pre>
 */
class PLEXE_API PlexeInterfaceControlInfo : public ::omnetpp::cMessage
{
  protected:
    int interfaces = plexe::ALL;

  private:
    void copy(const PlexeInterfaceControlInfo& other);

  protected:
    bool operator==(const PlexeInterfaceControlInfo&) = delete;

  public:
    PlexeInterfaceControlInfo(const char *name=nullptr, short kind=0);
    PlexeInterfaceControlInfo(const PlexeInterfaceControlInfo& other);
    virtual ~PlexeInterfaceControlInfo();
    PlexeInterfaceControlInfo& operator=(const PlexeInterfaceControlInfo& other);
    virtual PlexeInterfaceControlInfo *dup() const override {return new PlexeInterfaceControlInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getInterfaces() const;
    virtual void setInterfaces(int interfaces);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PlexeInterfaceControlInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PlexeInterfaceControlInfo& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline PlexeInterfaceControlInfo *fromAnyPtr(any_ptr ptr) { return check_and_cast<PlexeInterfaceControlInfo*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PLEXEINTERFACECONTROLINFO_M_H

