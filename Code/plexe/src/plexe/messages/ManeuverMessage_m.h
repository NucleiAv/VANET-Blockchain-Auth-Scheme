//
// Generated file, do not edit! Created by opp_msgtool 6.0 from plexe/messages/ManeuverMessage.msg.
//

#ifndef __MANEUVERMESSAGE_M_H
#define __MANEUVERMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef PLEXE_API
#  if defined(PLEXE_EXPORT)
#    define PLEXE_API  OPP_DLLEXPORT
#  elif defined(PLEXE_IMPORT)
#    define PLEXE_API  OPP_DLLIMPORT
#  else
#    define PLEXE_API
#  endif
#endif

class ManeuverMessage;
// cplusplus {{
    /** message type for maneuver messages */
    static const int MANEUVER_TYPE = 12347;
// }}

/**
 * Class generated from <tt>plexe/messages/ManeuverMessage.msg:29</tt> by opp_msgtool.
 * <pre>
 * // General message for an arbitrary maneuver to holds common information.
 * // Only children of this message should be initialized.
 * packet ManeuverMessage
 * {
 *     // id of the originator of this message
 *     int vehicleId;
 *     // id of the platoon this message is about
 *     int platoonId;
 *     // id of the destination of this message
 *     int destinationId;
 *     // sumo external id of the sender
 *     string externalId;
 * }
 * </pre>
 */
class PLEXE_API ManeuverMessage : public ::omnetpp::cPacket
{
  protected:
    int vehicleId = 0;
    int platoonId = 0;
    int destinationId = 0;
    omnetpp::opp_string externalId;

  private:
    void copy(const ManeuverMessage& other);

  protected:
    bool operator==(const ManeuverMessage&) = delete;

  public:
    ManeuverMessage(const char *name=nullptr, short kind=0);
    ManeuverMessage(const ManeuverMessage& other);
    virtual ~ManeuverMessage();
    ManeuverMessage& operator=(const ManeuverMessage& other);
    virtual ManeuverMessage *dup() const override {return new ManeuverMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getVehicleId() const;
    virtual void setVehicleId(int vehicleId);

    virtual int getPlatoonId() const;
    virtual void setPlatoonId(int platoonId);

    virtual int getDestinationId() const;
    virtual void setDestinationId(int destinationId);

    virtual const char * getExternalId() const;
    virtual void setExternalId(const char * externalId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ManeuverMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ManeuverMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ManeuverMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<ManeuverMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MANEUVERMESSAGE_M_H

