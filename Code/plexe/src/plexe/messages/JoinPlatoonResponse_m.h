//
// Generated file, do not edit! Created by opp_msgtool 6.0 from plexe/messages/JoinPlatoonResponse.msg.
//

#ifndef __JOINPLATOONRESPONSE_M_H
#define __JOINPLATOONRESPONSE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef PLEXE_API
#  if defined(PLEXE_EXPORT)
#    define PLEXE_API  OPP_DLLEXPORT
#  elif defined(PLEXE_IMPORT)
#    define PLEXE_API  OPP_DLLIMPORT
#  else
#    define PLEXE_API
#  endif
#endif

class JoinPlatoonResponse;
#include "ManeuverMessage_m.h" // import ManeuverMessage

/**
 * Class generated from <tt>plexe/messages/JoinPlatoonResponse.msg:27</tt> by opp_msgtool.
 * <pre>
 * // Response to a JoinRequest.
 * // Is sent from the leader of the Platoon to a possible joiner to answer a
 * // JoinRequest.
 * packet JoinPlatoonResponse extends ManeuverMessage
 * {
 *     // is the joiner allowed to join?
 *     bool permitted;
 * }
 * </pre>
 */
class PLEXE_API JoinPlatoonResponse : public ::ManeuverMessage
{
  protected:
    bool permitted = false;

  private:
    void copy(const JoinPlatoonResponse& other);

  protected:
    bool operator==(const JoinPlatoonResponse&) = delete;

  public:
    JoinPlatoonResponse(const char *name=nullptr, short kind=0);
    JoinPlatoonResponse(const JoinPlatoonResponse& other);
    virtual ~JoinPlatoonResponse();
    JoinPlatoonResponse& operator=(const JoinPlatoonResponse& other);
    virtual JoinPlatoonResponse *dup() const override {return new JoinPlatoonResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getPermitted() const;
    virtual void setPermitted(bool permitted);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const JoinPlatoonResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, JoinPlatoonResponse& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline JoinPlatoonResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<JoinPlatoonResponse*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __JOINPLATOONRESPONSE_M_H

